%% Multiple Processors Example
% Applying approximate Bayesian computation (ABC) with parallel tempering
% Monte Carlo (PTMC) and anytime parallel tempering Monte Carlo (APTMC) to
% estimate the parameters $\theta = \left(\theta_1, \theta_2,
% \theta_3\right)$ of a stochastic Lotka-Volterra predator-prey model.

% Various flags to decide which algorithms and diagnostics are run
% clear;
run_rejection = 0; run_stdexchange = 1; run_anytime=1;
run_single = 1; run_multi = 1;
% Plots and diagnostics
acf_plots = 0; time_plots = 0; chain_plots = 0;
density_plots = 0; marginal_plots = 0;

% initialise some algorithm parameters
LV_initialisation_multi
fprintf('I will be done on:')
disp(datetime(clock + [0 0 0 0 0 (2*run_single*ceil(ntimes/4)+(run_anytime+run_stdexchange)*ntimes)*params.T]))


%% Multi-processor standard ABC-MCMC algorithm with exchange moves (ABC-PTMC-W)
% The ABC-MCMC algorithm run in parallel on $W=7$ workers, with $Kk=3$
% chains per processor (i.e. $K=21$ chains in total), each chain targets a
% posterior associated with a different $\varepsilon^k$ and exchange moves
% are performed between workers.

if(run_stdexchange)
    % Run LV_stdexchange only performing multi-processor ABC-PTMC-W
    run_single_stdexchange = 0; run_multi_stdexchange = 1; 
    LV_stdexchange
end

%% Multi-processor anytime ABC-MCMC algorithm with exchange moves (ABC-APTMC-W)
% The above algorithm but run with anytime.

if(run_anytime)
    % Run LV_anytime only performing multi-processor ABC-APTMC-W
    run_single_anytime = 0; run_multi_anytime = 1;
    LV_anytime
end

if run_single
    W = ntimes; % W becomes no. times single processor algorithms are run.
    % Run LV_stdexchange only performing single-processor ABC-PTMC-1
    run_single_stdexchange = 1; run_multi_stdexchange = 0;
    LV_stdexchange
    
    % Run LV_anytime only performing multi-processor ABC-APTMC-1
    run_single_anytime = 1; run_multi_anytime = 0;
    LV_anytime
end

%% Performance comparison
% All ABC-MCMC algorithms ran for the same amount of time. To compare their
% efficiency, sample autocorelation function plots are drawn and the
% effective sample size (ESS) and integrated autocorrelation time (iat) are
% computed using the initial monotone positive sequence estimator (IMSE).

if(acf_plots)
    % Compute ess and iat for all ABC-MCMC algorithms
    maxc = 6;
    
    % ABC-PTMC-W
    [ess.stdexchangem, iat.stdexchangem] = autocorr_new_multi(S_em, maxc);
    
    % ABC-APTMC-W
    [ess.anytimem, iat.anytimem] = autocorr_new_multi(A_em, maxc);
    if run_single
        % ABC-PTMC-1
        [ess.stdexchange, iat.stdexchange] = autocorr_new_multi(S_e, maxc);
        % ABC-APTMC-1
        [ess.anytime, iat.anytime] = autocorr_new_multi(A_e, maxc);
    end
    
    fprintf("ESS:\n"); disp(ess);
    fprintf("IAT:\n"); disp(iat);
    
    acf_params.maxlag = 300;
    acf_params.names = {'ABC-PTMC-1', 'ABC-APTMC-1', 'ABC-PTMC-W', 'ABC-APTMC-W'};
    acf_params.linestyle = {':','--',':', '--'};
    acf_params.marker = {'diamond', 'square', 'diamond', 'square'};
    acf_params.markersize = {4, 3, 2, 2};
    acf_params.col = {rgb('DarkBlue'), rgb('DarkOrange'),  rgb('Teal'), rgb('Red')};
    [R_out] = acf_keep_maxlag({S_e, A_e, S_em, A_em}, {b_e(1,:),b_a(1, :), b_em(1,:),b_am(1, :)}, acf_params.maxlag);
    figure;
    for i=1:3
        subplot(3, 1, i); plot_acf_multi(R_out, i, acf_params, sprintf('\\theta_%d', i), 1);
    end
end
%% Chain plots
% Plotting the chains output by the various ABC-MCMC algorithms
if(chain_plots)
    % Multi processor chains
    plot_multi_chains(S_em, true_theta, 'ABC-PTMC-W') %#ok<*UNRCH>
    plot_multi_chains(A_em, true_theta, 'ABC-APTMC-W')
    if run_single
        plot_multi_chains(S_e, true_theta, 'ABC-PTMC-1')
        plot_multi_chains(A_e, true_theta, 'ABC-APTMC-1')
    end
end

%% Marginal plots
% Plot histograms of the marginal posteriors output from ABC-MCMC
% algorithms and compare them to the ABC rejection sampling reference
if(marginal_plots)
    nbins = 50;
    plot_marginal_posteriors(cell2mat(S_em'), S_rej, nbins, 'ABC-PTMC-W');
    plot_marginal_posteriors(cell2mat(A_em'), S_rej, nbins, 'ABC-APTMC-W');
    if run_single
        plot_marginal_posteriors(cell2mat(S_e'), S_rej, nbins, 'ABC-PTMC-1');
        plot_marginal_posteriors(cell2mat(A_e'), S_rej, nbins, 'ABC-APTMC-1');
    end
end

if(density_plots)
    % Display all marginal densities on the same plot
    den = [2^8 2^16 2^8
        2^7 2^7 2^7
        2^7 2^7 2^7
        2^7 2^7 2^7];
    names = {'ABC-PTMC-1', 'ABC-PTMC-W', 'Standard ABC'}
    plot_multi_densities({cell2mat(S_e'), cell2mat(S_em'), cell2mat(A_e'), cell2mat(A_em')},...
        S_rej, den);
end

%% Timeplots
% Timelines of local and exchange moves for the ABC-(A)PTMC algorithms for the
% first 300 seconds of their runs, to observe the time the algorithms spend
% performing each type of update.

if(time_plots)
    % Timeline plots (one processor)
    w = 2; tlim = 300; time_interval = [0 min(tlim, params.T)]; %[max(params.T-tlim, 0) params.T]; %
    
    % Timeline plots (K processors)
    names = {'Global', 'Worker 1', 'Worker 2', 'Worker 3', 'Worker 4', 'Worker 5', 'Worker 6', 'Worker 7'};
    col = {rgb('MediumBlue'), rgb('SkyBlue'), rgb('SkyBlue'),...
        rgb('SkyBlue'), rgb('SkyBlue'), rgb('SkyBlue'), rgb('SkyBlue'), rgb('SkyBlue')};
    edgecol = {rgb('LightCyan'), rgb('SteelBlue'), rgb('SteelBlue'), rgb('SteelBlue'), rgb('SteelBlue'),...
        rgb('SteelBlue'), rgb('SteelBlue'), rgb('SteelBlue'), rgb('SteelBlue')};
    timeplots_multi(TM_m{w}(1:tlim,:), 'ABC-PTMC-W: Timeline of local and exchange moves', time_interval, names, 1, col, edgecol);
    timeplots_multi(TM_am{w}(1:2*tlim,:), 'ABC-APTMC-W: Timeline of local and exchange moves', time_interval, names, 0);
end

fprintf('Saving workspace... ')
save(sprintf('results/ABC/LV/LV_example_wkspace_multi_%s.mat', datestr(now, 'yyyymmdd_HHMM')))
fprintf('done \n')

% save (or read) everything
% make folder
algorithm_names = {'anytime', 'stdexchange', 'stdexchangem','anytimem'};
saving = 0; num = 4;
for nalgs=1:length(algorithm_names)
    algorithm_name = algorithm_names{nalgs};
    dirname =  sprintf('LV_multi_%s_%s_%d', datestr(now, 'yyyymmdd'), algorithm_name, params.T);
    %     create folder to store results
    if(saving)
        mkdir(sprintf('results/LV/%s', dirname))
    end
    switch algorithm_name
        case 'anytime'
            if(saving)
                save_all(dirname, algorithm_name, A_e, b_a, TM_a, out_a, rates_a, num)
            else
                [A_e, b_a, TM_a, out_a, rates_a] = read_all(dirname, algorithm_name, ntimes);
            end

        case 'anytimem'
            if(saving)
                save_all(dirname, algorithm_name, A_em, b_am, TM_am, out_am, rates_am, num)
            else
                [A_em, b_am, TM_am, out_am, rates_am] = read_all(dirname, algorithm_name, ntimes);

            end

        case 'stdexchange'
            if(saving)
                save_all(dirname, algorithm_name, S_e, b_e, TM, out_e, rates_e, num)
            else
                [S_e, b_e, TM, out_e, rates_e] = read_all(dirname, algorithm_name, ntimes);
            end

        case 'stdexchangem'
            if(saving)
                save_all(dirname, algorithm_name, S_em, b_em, TM_m, out_em, rates_em, num)
            else
                [S_em, b_em, TM_m, out_em, rates_em] = read_all(dirname, algorithm_name, ntimes);
            end

        otherwise
            fprintf('No algorithm with that name available')
    end

end

delete(gcp);